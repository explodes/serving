// Code generated by protoc-gen-go. DO NOT EDIT.
// source: expz/expz.proto

package expz

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FeatureDeclaration struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Doc                  string   `protobuf:"bytes,2,opt,name=doc,proto3" json:"doc,omitempty"`
	DefaultValue         *Flag    `protobuf:"bytes,3,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FeatureDeclaration) Reset()         { *m = FeatureDeclaration{} }
func (m *FeatureDeclaration) String() string { return proto.CompactTextString(m) }
func (*FeatureDeclaration) ProtoMessage()    {}
func (*FeatureDeclaration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b436858b417563, []int{0}
}

func (m *FeatureDeclaration) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FeatureDeclaration.Unmarshal(m, b)
}
func (m *FeatureDeclaration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FeatureDeclaration.Marshal(b, m, deterministic)
}
func (m *FeatureDeclaration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeatureDeclaration.Merge(m, src)
}
func (m *FeatureDeclaration) XXX_Size() int {
	return xxx_messageInfo_FeatureDeclaration.Size(m)
}
func (m *FeatureDeclaration) XXX_DiscardUnknown() {
	xxx_messageInfo_FeatureDeclaration.DiscardUnknown(m)
}

var xxx_messageInfo_FeatureDeclaration proto.InternalMessageInfo

func (m *FeatureDeclaration) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FeatureDeclaration) GetDoc() string {
	if m != nil {
		return m.Doc
	}
	return ""
}

func (m *FeatureDeclaration) GetDefaultValue() *Flag {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

type Features struct {
	Flags                map[string]*Flag `protobuf:"bytes,1,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *Features) Reset()         { *m = Features{} }
func (m *Features) String() string { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()    {}
func (*Features) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b436858b417563, []int{1}
}

func (m *Features) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Features.Unmarshal(m, b)
}
func (m *Features) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Features.Marshal(b, m, deterministic)
}
func (m *Features) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features.Merge(m, src)
}
func (m *Features) XXX_Size() int {
	return xxx_messageInfo_Features.Size(m)
}
func (m *Features) XXX_DiscardUnknown() {
	xxx_messageInfo_Features.DiscardUnknown(m)
}

var xxx_messageInfo_Features proto.InternalMessageInfo

func (m *Features) GetFlags() map[string]*Flag {
	if m != nil {
		return m.Flags
	}
	return nil
}

type Flag struct {
	// Value of this flag.
	//
	// Types that are valid to be assigned to Flag:
	//	*Flag_I64
	//	*Flag_F64
	//	*Flag_String_
	//	*Flag_Bool
	Flag                 isFlag_Flag `protobuf_oneof:"flag"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Flag) Reset()         { *m = Flag{} }
func (m *Flag) String() string { return proto.CompactTextString(m) }
func (*Flag) ProtoMessage()    {}
func (*Flag) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5b436858b417563, []int{2}
}

func (m *Flag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Flag.Unmarshal(m, b)
}
func (m *Flag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Flag.Marshal(b, m, deterministic)
}
func (m *Flag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Flag.Merge(m, src)
}
func (m *Flag) XXX_Size() int {
	return xxx_messageInfo_Flag.Size(m)
}
func (m *Flag) XXX_DiscardUnknown() {
	xxx_messageInfo_Flag.DiscardUnknown(m)
}

var xxx_messageInfo_Flag proto.InternalMessageInfo

type isFlag_Flag interface {
	isFlag_Flag()
}

type Flag_I64 struct {
	I64 int64 `protobuf:"varint,1,opt,name=i64,proto3,oneof"`
}

type Flag_F64 struct {
	F64 float64 `protobuf:"fixed64,2,opt,name=f64,proto3,oneof"`
}

type Flag_String_ struct {
	String_ string `protobuf:"bytes,3,opt,name=string,proto3,oneof"`
}

type Flag_Bool struct {
	Bool bool `protobuf:"varint,4,opt,name=bool,proto3,oneof"`
}

func (*Flag_I64) isFlag_Flag() {}

func (*Flag_F64) isFlag_Flag() {}

func (*Flag_String_) isFlag_Flag() {}

func (*Flag_Bool) isFlag_Flag() {}

func (m *Flag) GetFlag() isFlag_Flag {
	if m != nil {
		return m.Flag
	}
	return nil
}

func (m *Flag) GetI64() int64 {
	if x, ok := m.GetFlag().(*Flag_I64); ok {
		return x.I64
	}
	return 0
}

func (m *Flag) GetF64() float64 {
	if x, ok := m.GetFlag().(*Flag_F64); ok {
		return x.F64
	}
	return 0
}

func (m *Flag) GetString_() string {
	if x, ok := m.GetFlag().(*Flag_String_); ok {
		return x.String_
	}
	return ""
}

func (m *Flag) GetBool() bool {
	if x, ok := m.GetFlag().(*Flag_Bool); ok {
		return x.Bool
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Flag) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Flag_OneofMarshaler, _Flag_OneofUnmarshaler, _Flag_OneofSizer, []interface{}{
		(*Flag_I64)(nil),
		(*Flag_F64)(nil),
		(*Flag_String_)(nil),
		(*Flag_Bool)(nil),
	}
}

func _Flag_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Flag)
	// flag
	switch x := m.Flag.(type) {
	case *Flag_I64:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.I64))
	case *Flag_F64:
		b.EncodeVarint(2<<3 | proto.WireFixed64)
		b.EncodeFixed64(math.Float64bits(x.F64))
	case *Flag_String_:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.String_)
	case *Flag_Bool:
		t := uint64(0)
		if x.Bool {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Flag.Flag has unexpected type %T", x)
	}
	return nil
}

func _Flag_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Flag)
	switch tag {
	case 1: // flag.i64
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Flag = &Flag_I64{int64(x)}
		return true, err
	case 2: // flag.f64
		if wire != proto.WireFixed64 {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeFixed64()
		m.Flag = &Flag_F64{math.Float64frombits(x)}
		return true, err
	case 3: // flag.string
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Flag = &Flag_String_{x}
		return true, err
	case 4: // flag.bool
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Flag = &Flag_Bool{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Flag_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Flag)
	// flag
	switch x := m.Flag.(type) {
	case *Flag_I64:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.I64))
	case *Flag_F64:
		n += 1 // tag and wire
		n += 8
	case *Flag_String_:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.String_)))
		n += len(x.String_)
	case *Flag_Bool:
		n += 1 // tag and wire
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*FeatureDeclaration)(nil), "expz.FeatureDeclaration")
	proto.RegisterType((*Features)(nil), "expz.Features")
	proto.RegisterMapType((map[string]*Flag)(nil), "expz.Features.FlagsEntry")
	proto.RegisterType((*Flag)(nil), "expz.Flag")
}

func init() { proto.RegisterFile("expz/expz.proto", fileDescriptor_b5b436858b417563) }

var fileDescriptor_b5b436858b417563 = []byte{
	// 297 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0xbf, 0x6f, 0xf2, 0x30,
	0x10, 0xc5, 0x24, 0x20, 0x38, 0xbe, 0x4f, 0xad, 0x4e, 0x1d, 0xd2, 0x4e, 0x56, 0xa6, 0x4c, 0x44,
	0xa2, 0x08, 0x55, 0x1d, 0x11, 0x45, 0xcc, 0x1e, 0x3a, 0x74, 0xa9, 0x0c, 0x38, 0x69, 0x84, 0x89,
	0x91, 0xed, 0xa0, 0xd2, 0xad, 0xff, 0x79, 0x75, 0xc6, 0x52, 0x87, 0x2e, 0xd1, 0xfb, 0x71, 0x4f,
	0xf7, 0xe2, 0x83, 0x1b, 0xf5, 0x79, 0xfa, 0x2a, 0xe9, 0x33, 0x3d, 0x59, 0xe3, 0x0d, 0xa6, 0x84,
	0xf3, 0x03, 0xe0, 0x5a, 0x49, 0xdf, 0x59, 0xb5, 0x52, 0x3b, 0x2d, 0xad, 0xf4, 0x8d, 0x69, 0x11,
	0x21, 0x6d, 0xe5, 0x51, 0x65, 0x8c, 0xb3, 0x62, 0x2c, 0x02, 0xc6, 0x5b, 0x48, 0xf6, 0x66, 0x97,
	0xf5, 0x83, 0x44, 0x10, 0x4b, 0xf8, 0xbf, 0x57, 0x95, 0xec, 0xb4, 0x7f, 0x3f, 0x4b, 0xdd, 0xa9,
	0x2c, 0xe1, 0xac, 0x98, 0xcc, 0x60, 0x1a, 0xb6, 0xac, 0xb5, 0xac, 0xc5, 0xbf, 0x38, 0xf0, 0x4a,
	0x7e, 0xfe, 0xcd, 0x60, 0x14, 0xb7, 0x39, 0x2c, 0x61, 0x50, 0x69, 0x59, 0xbb, 0x8c, 0xf1, 0xa4,
	0x98, 0xcc, 0xee, 0x63, 0x2a, 0xda, 0x21, 0xee, 0x5e, 0x5a, 0x6f, 0x2f, 0xe2, 0x3a, 0xf7, 0xb0,
	0x02, 0xf8, 0x15, 0xa9, 0xce, 0x41, 0x5d, 0x62, 0x43, 0x82, 0xc8, 0x61, 0x70, 0xad, 0xd1, 0xff,
	0x53, 0xe3, 0x6a, 0x3c, 0xf7, 0x9f, 0x58, 0x5e, 0x41, 0x4a, 0x12, 0x22, 0x24, 0xcd, 0x62, 0x1e,
	0xf2, 0xc9, 0xa6, 0x27, 0x88, 0x90, 0x56, 0x2d, 0xe6, 0x21, 0xcf, 0x48, 0xab, 0x16, 0x73, 0xcc,
	0x60, 0xe8, 0xbc, 0x6d, 0xda, 0x3a, 0xfc, 0xdd, 0x78, 0xd3, 0x13, 0x91, 0xe3, 0x1d, 0xa4, 0x5b,
	0x63, 0x74, 0x96, 0x72, 0x56, 0x8c, 0x36, 0x3d, 0x11, 0xd8, 0x72, 0x08, 0x29, 0xd5, 0x5d, 0xe6,
	0x6f, 0xbc, 0x6e, 0xfc, 0x47, 0xb7, 0x9d, 0xee, 0xcc, 0x91, 0xde, 0x5d, 0x9b, 0xbd, 0x72, 0xa5,
	0x53, 0xf6, 0xdc, 0xb4, 0x75, 0x38, 0xc4, 0x76, 0x18, 0x2e, 0xf1, 0xf8, 0x13, 0x00, 0x00, 0xff,
	0xff, 0xbf, 0x1d, 0x48, 0x6f, 0x9c, 0x01, 0x00, 0x00,
}
