// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/explodes/serving/expz (interfaces: ExpzServiceClient)

// Package mock_expz is a generated GoMock package.
package mock_expz

import (
	context "context"
	expz "github.com/explodes/serving/expz"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockExpzServiceClient is a mock of ExpzServiceClient interface
type MockExpzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockExpzServiceClientMockRecorder
}

// MockExpzServiceClientMockRecorder is the mock recorder for MockExpzServiceClient
type MockExpzServiceClientMockRecorder struct {
	mock *MockExpzServiceClient
}

// NewMockExpzServiceClient creates a new mock instance
func NewMockExpzServiceClient(ctrl *gomock.Controller) *MockExpzServiceClient {
	mock := &MockExpzServiceClient{ctrl: ctrl}
	mock.recorder = &MockExpzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockExpzServiceClient) EXPECT() *MockExpzServiceClientMockRecorder {
	return m.recorder
}

// GetExperiments mocks base method
func (m *MockExpzServiceClient) GetExperiments(arg0 context.Context, arg1 *expz.GetExperimentsRequest, arg2 ...grpc.CallOption) (*expz.GetExperimentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetExperiments", varargs...)
	ret0, _ := ret[0].(*expz.GetExperimentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExperiments indicates an expected call of GetExperiments
func (mr *MockExpzServiceClientMockRecorder) GetExperiments(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExperiments", reflect.TypeOf((*MockExpzServiceClient)(nil).GetExperiments), varargs...)
}
