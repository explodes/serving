// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/explodes/serving/logz (interfaces: LogzServiceClient)

// Package mock_logz is a generated GoMock package.
package mock_logz

import (
	context "context"
	logz "github.com/explodes/serving/logz"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLogzServiceClient is a mock of LogzServiceClient interface
type MockLogzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogzServiceClientMockRecorder
}

// MockLogzServiceClientMockRecorder is the mock recorder for MockLogzServiceClient
type MockLogzServiceClientMockRecorder struct {
	mock *MockLogzServiceClient
}

// NewMockLogzServiceClient creates a new mock instance
func NewMockLogzServiceClient(ctrl *gomock.Controller) *MockLogzServiceClient {
	mock := &MockLogzServiceClient{ctrl: ctrl}
	mock.recorder = &MockLogzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogzServiceClient) EXPECT() *MockLogzServiceClientMockRecorder {
	return m.recorder
}

// Record mocks base method
func (m *MockLogzServiceClient) Record(arg0 context.Context, arg1 *logz.RecordRequest, arg2 ...grpc.CallOption) (*logz.RecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Record", varargs...)
	ret0, _ := ret[0].(*logz.RecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Record indicates an expected call of Record
func (mr *MockLogzServiceClientMockRecorder) Record(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockLogzServiceClient)(nil).Record), varargs...)
}
