// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/explodes/serving/logz (interfaces: LogzServiceClient,Client)

// Package mock_logz is a generated GoMock package.
package mock_logz

import (
	context "context"
	logz "github.com/explodes/serving/logz"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockLogzServiceClient is a mock of LogzServiceClient interface
type MockLogzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLogzServiceClientMockRecorder
}

// MockLogzServiceClientMockRecorder is the mock recorder for MockLogzServiceClient
type MockLogzServiceClientMockRecorder struct {
	mock *MockLogzServiceClient
}

// NewMockLogzServiceClient creates a new mock instance
func NewMockLogzServiceClient(ctrl *gomock.Controller) *MockLogzServiceClient {
	mock := &MockLogzServiceClient{ctrl: ctrl}
	mock.recorder = &MockLogzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogzServiceClient) EXPECT() *MockLogzServiceClientMockRecorder {
	return m.recorder
}

// Record mocks base method
func (m *MockLogzServiceClient) Record(arg0 context.Context, arg1 *logz.RecordRequest, arg2 ...grpc.CallOption) (*logz.RecordResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Record", varargs...)
	ret0, _ := ret[0].(*logz.RecordResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Record indicates an expected call of Record
func (mr *MockLogzServiceClientMockRecorder) Record(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockLogzServiceClient)(nil).Record), varargs...)
}

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Debug mocks base method
func (m *MockClient) Debug(arg0 *logz.Frame, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0, arg1)
}

// Debug indicates an expected call of Debug
func (mr *MockClientMockRecorder) Debug(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockClient)(nil).Debug), arg0, arg1)
}

// Debugf mocks base method
func (m *MockClient) Debugf(arg0 *logz.Frame, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf
func (mr *MockClientMockRecorder) Debugf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockClient)(nil).Debugf), varargs...)
}

// Defer mocks base method
func (m *MockClient) Defer(arg0 *logz.Frame, arg1 logz.Level, arg2 string) logz.DeferredLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Defer", arg0, arg1, arg2)
	ret0, _ := ret[0].(logz.DeferredLog)
	return ret0
}

// Defer indicates an expected call of Defer
func (mr *MockClientMockRecorder) Defer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Defer", reflect.TypeOf((*MockClient)(nil).Defer), arg0, arg1, arg2)
}

// DeferRequestLog mocks base method
func (m *MockClient) DeferRequestLog(arg0 *logz.Frame) logz.DeferredLog {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeferRequestLog", arg0)
	ret0, _ := ret[0].(logz.DeferredLog)
	return ret0
}

// DeferRequestLog indicates an expected call of DeferRequestLog
func (mr *MockClientMockRecorder) DeferRequestLog(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeferRequestLog", reflect.TypeOf((*MockClient)(nil).DeferRequestLog), arg0)
}

// Error mocks base method
func (m *MockClient) Error(arg0 *logz.Frame, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0, arg1)
}

// Error indicates an expected call of Error
func (mr *MockClientMockRecorder) Error(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockClient)(nil).Error), arg0, arg1)
}

// Errorf mocks base method
func (m *MockClient) Errorf(arg0 *logz.Frame, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf
func (mr *MockClientMockRecorder) Errorf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockClient)(nil).Errorf), varargs...)
}

// Info mocks base method
func (m *MockClient) Info(arg0 *logz.Frame, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0, arg1)
}

// Info indicates an expected call of Info
func (mr *MockClientMockRecorder) Info(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockClient)(nil).Info), arg0, arg1)
}

// Infof mocks base method
func (m *MockClient) Infof(arg0 *logz.Frame, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof
func (mr *MockClientMockRecorder) Infof(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockClient)(nil).Infof), varargs...)
}

// Warn mocks base method
func (m *MockClient) Warn(arg0 *logz.Frame, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0, arg1)
}

// Warn indicates an expected call of Warn
func (mr *MockClientMockRecorder) Warn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockClient)(nil).Warn), arg0, arg1)
}

// Warnf mocks base method
func (m *MockClient) Warnf(arg0 *logz.Frame, arg1 string, arg2 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf
func (mr *MockClientMockRecorder) Warnf(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockClient)(nil).Warnf), varargs...)
}
