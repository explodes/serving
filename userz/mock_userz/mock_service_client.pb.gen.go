// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/explodes/serving/userz (interfaces: UserzServiceClient)

// Package mock_userz is a generated GoMock package.
package mock_userz

import (
	context "context"
	userz "github.com/explodes/serving/userz"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	reflect "reflect"
)

// MockUserzServiceClient is a mock of UserzServiceClient interface
type MockUserzServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserzServiceClientMockRecorder
}

// MockUserzServiceClientMockRecorder is the mock recorder for MockUserzServiceClient
type MockUserzServiceClientMockRecorder struct {
	mock *MockUserzServiceClient
}

// NewMockUserzServiceClient creates a new mock instance
func NewMockUserzServiceClient(ctrl *gomock.Controller) *MockUserzServiceClient {
	mock := &MockUserzServiceClient{ctrl: ctrl}
	mock.recorder = &MockUserzServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserzServiceClient) EXPECT() *MockUserzServiceClientMockRecorder {
	return m.recorder
}

// Login mocks base method
func (m *MockUserzServiceClient) Login(arg0 context.Context, arg1 *userz.LoginRequest, arg2 ...grpc.CallOption) (*userz.LoginResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*userz.LoginResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login
func (mr *MockUserzServiceClientMockRecorder) Login(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserzServiceClient)(nil).Login), varargs...)
}

// Validate mocks base method
func (m *MockUserzServiceClient) Validate(arg0 context.Context, arg1 *userz.ValidateRequest, arg2 ...grpc.CallOption) (*userz.ValidateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Validate", varargs...)
	ret0, _ := ret[0].(*userz.ValidateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockUserzServiceClientMockRecorder) Validate(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockUserzServiceClient)(nil).Validate), varargs...)
}
